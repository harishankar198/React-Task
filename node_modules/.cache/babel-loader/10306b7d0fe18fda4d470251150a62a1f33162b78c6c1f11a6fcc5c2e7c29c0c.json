{"ast":null,"code":"import { BASE_URL, APP_ID, API_ENDPOINTS } from \"./constants\";\nexport const loginUser = async credentials => {\n  try {\n    const response = await fetch(`${BASE_URL}${API_ENDPOINTS.login}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        APPID: APP_ID\n      },\n      body: JSON.stringify(credentials)\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error(\"Login API error:\", error);\n    return {\n      success: false,\n      msg: \"Network error. Please try again.\"\n    };\n  }\n};\nexport const fetchDoctors = async token => {\n  try {\n    const response = await fetch(`${BASE_URL}${API_ENDPOINTS.doctorList}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        APPID: APP_ID,\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({})\n    });\n    const data = await response.json();\n    if (response.ok && Array.isArray(data.data)) {\n      return data.data;\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error fetching doctor list:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["BASE_URL","APP_ID","API_ENDPOINTS","loginUser","credentials","response","fetch","login","method","headers","APPID","body","JSON","stringify","result","json","error","console","success","msg","fetchDoctors","token","doctorList","Authorization","data","ok","Array","isArray"],"sources":["C:/Users/aswin/Desktop/React Task/my-react-task/src/lib/api.js"],"sourcesContent":["import { BASE_URL, APP_ID, API_ENDPOINTS } from \"./constants\";\r\n\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}${API_ENDPOINTS.login}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        APPID: APP_ID,\r\n      },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\"Login API error:\", error);\r\n    return { success: false, msg: \"Network error. Please try again.\" };\r\n  }\r\n};\r\n\r\nexport const fetchDoctors = async (token) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}${API_ENDPOINTS.doctorList}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        APPID: APP_ID,\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({}),\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (response.ok && Array.isArray(data.data)) {\r\n      return data.data;\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching doctor list:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,aAAa,QAAQ,aAAa;AAE7D,OAAO,MAAMC,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,GAAGE,aAAa,CAACK,KAAK,EAAE,EAAE;MAChEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,KAAK,EAAET;MACT,CAAC;MACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,WAAW;IAClC,CAAC,CAAC;IAEF,MAAMU,MAAM,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IACpC,OAAOD,MAAM;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,OAAO;MAAEE,OAAO,EAAE,KAAK;MAAEC,GAAG,EAAE;IAAmC,CAAC;EACpE;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;EAC3C,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,GAAGE,aAAa,CAACoB,UAAU,EAAE,EAAE;MACrEd,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,KAAK,EAAET,MAAM;QACbsB,aAAa,EAAE,UAAUF,KAAK;MAChC,CAAC;MACDV,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC;IAEF,MAAMW,IAAI,GAAG,MAAMnB,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,IAAIV,QAAQ,CAACoB,EAAE,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAACA,IAAI,CAAC,EAAE;MAC3C,OAAOA,IAAI,CAACA,IAAI;IAClB,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}