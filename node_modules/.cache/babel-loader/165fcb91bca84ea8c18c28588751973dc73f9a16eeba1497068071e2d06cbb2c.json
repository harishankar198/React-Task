{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aswin\\\\Desktop\\\\React Task\\\\my-react-task\\\\src\\\\DoctorList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorsList = () => {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const token = localStorage.getItem(\"token\");\n  useEffect(() => {\n    const fetchDoctors = async () => {\n      try {\n        const response = await fetch(\"https://ahd.instapract.ae/web/api/doctor/doc-list\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"APPID\": \"Gem3s12345\",\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await response.json();\n        console.log(\"Doctors List API Response:\", data);\n        if (data.status && Array.isArray(data.data)) {\n          setDoctors(data.data);\n        } else {\n          console.error(\"Unexpected response format\", data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching doctors:\", error);\n      }\n    };\n    fetchDoctors();\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Doctors List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"space-y-2\",\n      children: doctors.length > 0 ? doctors.map((doc, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"p-3 border rounded shadow\",\n        children: doc.name || doc.doctor_name || \"Doctor Name not available\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No doctors found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorsList, \"kcw5qKDPTTui1RDpe6DT6D3WwHo=\");\n_c = DoctorsList;\nexport default DoctorsList;\nvar _c;\n$RefreshReg$(_c, \"DoctorsList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","DoctorsList","_s","doctors","setDoctors","token","localStorage","getItem","fetchDoctors","response","fetch","method","headers","Authorization","data","json","console","log","status","Array","isArray","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","doc","index","name","doctor_name","_c","$RefreshReg$"],"sources":["C:/Users/aswin/Desktop/React Task/my-react-task/src/DoctorList.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst DoctorsList = () => {\r\n  const [doctors, setDoctors] = useState([]);\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  useEffect(() => {\r\n    const fetchDoctors = async () => {\r\n      try {\r\n        const response = await fetch(\"https://ahd.instapract.ae/web/api/doctor/doc-list\", {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"APPID\": \"Gem3s12345\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        const data = await response.json();\r\n        console.log(\"Doctors List API Response:\", data);\r\n\r\n        if (data.status && Array.isArray(data.data)) {\r\n          setDoctors(data.data);\r\n        } else {\r\n          console.error(\"Unexpected response format\", data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching doctors:\", error);\r\n      }\r\n    };\r\n\r\n    fetchDoctors();\r\n  }, [token]);\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Doctors List</h2>\r\n      <ul className=\"space-y-2\">\r\n        {doctors.length > 0 ? (\r\n          doctors.map((doc, index) => (\r\n            <li key={index} className=\"p-3 border rounded shadow\">\r\n              {doc.name || doc.doctor_name || \"Doctor Name not available\"}\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <p>No doctors found.</p>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorsList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMO,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3CV,SAAS,CAAC,MAAM;IACd,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mDAAmD,EAAE;UAChFC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,OAAO,EAAE,YAAY;YACrBC,aAAa,EAAE,UAAUR,KAAK;UAChC;QACF,CAAC,CAAC;QAEF,MAAMS,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEH,IAAI,CAAC;QAE/C,IAAIA,IAAI,CAACI,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACN,IAAI,CAACA,IAAI,CAAC,EAAE;UAC3CV,UAAU,CAACU,IAAI,CAACA,IAAI,CAAC;QACvB,CAAC,MAAM;UACLE,OAAO,CAACK,KAAK,CAAC,4BAA4B,EAAEP,IAAI,CAAC;QACnD;MACF,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEDb,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACH,KAAK,CAAC,CAAC;EAEX,oBACEL,OAAA;IAAKsB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBvB,OAAA;MAAIsB,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzD3B,OAAA;MAAIsB,SAAS,EAAC,WAAW;MAAAC,QAAA,EACtBpB,OAAO,CAACyB,MAAM,GAAG,CAAC,GACjBzB,OAAO,CAAC0B,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACrB/B,OAAA;QAAgBsB,SAAS,EAAC,2BAA2B;QAAAC,QAAA,EAClDO,GAAG,CAACE,IAAI,IAAIF,GAAG,CAACG,WAAW,IAAI;MAA2B,GADpDF,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL,CAAC,gBAEF3B,OAAA;QAAAuB,QAAA,EAAG;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IACxB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACzB,EAAA,CAhDID,WAAW;AAAAiC,EAAA,GAAXjC,WAAW;AAkDjB,eAAeA,WAAW;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}