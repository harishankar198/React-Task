{"ast":null,"code":"// src/api.js\n\nimport { BASE_URL, APP_ID } from \"./constants\";\n\n/**\r\n * Login user with credentials\r\n * @param {Object} credentials - login payload\r\n * @returns {Object} response data or error object\r\n */\nexport const loginUser = async credentials => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/default/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        APPID: APP_ID\n      },\n      body: JSON.stringify(credentials)\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error(\"Login API error:\", error);\n    return {\n      success: false,\n      msg: \"Network error. Please try again.\"\n    };\n  }\n};\n\n/**\r\n * Fetch list of doctors using token\r\n * @param {string} token - Bearer token\r\n * @returns {Array} list of doctors or empty array\r\n */\nexport const fetchDoctors = async token => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/doctor/doc-list`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        APPID: APP_ID,\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({})\n    });\n    const data = await response.json();\n    console.log(\"Doctors List API Response:\", data);\n    if (response.ok && Array.isArray(data.data)) {\n      return data.data;\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error fetching doctor list:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["BASE_URL","APP_ID","loginUser","credentials","response","fetch","method","headers","APPID","body","JSON","stringify","result","json","error","console","success","msg","fetchDoctors","token","Authorization","data","log","ok","Array","isArray"],"sources":["C:/Users/aswin/Desktop/React Task/my-react-task/src/api.js"],"sourcesContent":["// src/api.js\r\n\r\nimport { BASE_URL, APP_ID } from \"./constants\";\r\n\r\n/**\r\n * Login user with credentials\r\n * @param {Object} credentials - login payload\r\n * @returns {Object} response data or error object\r\n */\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/api/default/login`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        APPID: APP_ID,\r\n      },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\"Login API error:\", error);\r\n    return { success: false, msg: \"Network error. Please try again.\" };\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch list of doctors using token\r\n * @param {string} token - Bearer token\r\n * @returns {Array} list of doctors or empty array\r\n */\r\nexport const fetchDoctors = async (token) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/api/doctor/doc-list`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        APPID: APP_ID,\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({}),\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(\"Doctors List API Response:\", data);\r\n\r\n    if (response.ok && Array.isArray(data.data)) {\r\n      return data.data;\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching doctor list:\", error);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,aAAa;;AAE9C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,oBAAoB,EAAE;MAC5DM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,KAAK,EAAEP;MACT,CAAC;MACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW;IAClC,CAAC,CAAC;IAEF,MAAMS,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACpC,OAAOD,MAAM;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,OAAO;MAAEE,OAAO,EAAE,KAAK;MAAEC,GAAG,EAAE;IAAmC,CAAC;EACpE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;EAC3C,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,sBAAsB,EAAE;MAC9DM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,KAAK,EAAEP,MAAM;QACbmB,aAAa,EAAE,UAAUD,KAAK;MAChC,CAAC;MACDV,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC;IAEF,MAAMU,IAAI,GAAG,MAAMjB,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClCE,OAAO,CAACO,GAAG,CAAC,4BAA4B,EAAED,IAAI,CAAC;IAE/C,IAAIjB,QAAQ,CAACmB,EAAE,IAAIC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAACA,IAAI,CAAC,EAAE;MAC3C,OAAOA,IAAI,CAACA,IAAI;IAClB,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}