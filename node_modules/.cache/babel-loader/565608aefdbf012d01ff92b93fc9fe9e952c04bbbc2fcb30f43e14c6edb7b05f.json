{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aswin\\\\Desktop\\\\React Task\\\\my-react-task\\\\src\\\\DoctorList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorsList = () => {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const token = localStorage.getItem(\"token\");\n  useEffect(() => {\n    const fetchDoctors = async () => {\n      try {\n        const response = await fetch(\"https://ahd.instapract.ae/web/api/doctor/doc-list\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"APPID\": \"Gem3s12345\",\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await response.json();\n        console.log(\"Doctors List Response:\", JSON.stringify(data, null, 2));\n        setDoctors((data === null || data === void 0 ? void 0 : data.data) || []);\n      } catch (error) {\n        console.error(\"Error fetching doctors:\", error);\n      }\n    };\n    fetchDoctors();\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Doctors List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"space-y-2\",\n      children: doctors.map((doc, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"p-3 border rounded shadow\",\n        children: [(doc === null || doc === void 0 ? void 0 : doc.name) || (doc === null || doc === void 0 ? void 0 : doc.doctor_name) || \"No Name Found\", \" -\", \" \", (doc === null || doc === void 0 ? void 0 : doc.speciality) || \"Speciality Not Found\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorsList, \"kcw5qKDPTTui1RDpe6DT6D3WwHo=\");\n_c = DoctorsList;\nexport default DoctorsList;\nvar _c;\n$RefreshReg$(_c, \"DoctorsList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","DoctorsList","_s","doctors","setDoctors","token","localStorage","getItem","fetchDoctors","response","fetch","method","headers","Authorization","data","json","console","log","JSON","stringify","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","doc","index","name","doctor_name","speciality","_c","$RefreshReg$"],"sources":["C:/Users/aswin/Desktop/React Task/my-react-task/src/DoctorList.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst DoctorsList = () => {\r\n  const [doctors, setDoctors] = useState([]);\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  useEffect(() => {\r\n    const fetchDoctors = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://ahd.instapract.ae/web/api/doctor/doc-list\",\r\n          {\r\n            method: \"GET\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              \"APPID\": \"Gem3s12345\",\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        const data = await response.json();\r\n        console.log(\"Doctors List Response:\", JSON.stringify(data, null, 2));\r\n\r\n        setDoctors(data?.data || []);\r\n      } catch (error) {\r\n        console.error(\"Error fetching doctors:\", error);\r\n      }\r\n    };\r\n\r\n    fetchDoctors();\r\n  }, [token]);\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Doctors List</h2>\r\n      <ul className=\"space-y-2\">\r\n        {doctors.map((doc, index) => (\r\n          <li key={index} className=\"p-3 border rounded shadow\">\r\n            {doc?.name || doc?.doctor_name || \"No Name Found\"} -{\" \"}\r\n            {doc?.speciality || \"Speciality Not Found\"}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorsList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMO,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3CV,SAAS,CAAC,MAAM;IACd,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,mDAAmD,EACnD;UACEC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,OAAO,EAAE,YAAY;YACrBC,aAAa,EAAE,UAAUR,KAAK;UAChC;QACF,CACF,CAAC;QAED,MAAMS,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAEpEV,UAAU,CAAC,CAAAU,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEA,IAAI,KAAI,EAAE,CAAC;MAC9B,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEDZ,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACH,KAAK,CAAC,CAAC;EAEX,oBACEL,OAAA;IAAKqB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBtB,OAAA;MAAIqB,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzD1B,OAAA;MAAIqB,SAAS,EAAC,WAAW;MAAAC,QAAA,EACtBnB,OAAO,CAACwB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACtB7B,OAAA;QAAgBqB,SAAS,EAAC,2BAA2B;QAAAC,QAAA,GAClD,CAAAM,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEE,IAAI,MAAIF,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEG,WAAW,KAAI,eAAe,EAAC,IAAE,EAAC,GAAG,EACvD,CAAAH,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEI,UAAU,KAAI,sBAAsB;MAAA,GAFnCH,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACxB,EAAA,CA5CID,WAAW;AAAAgC,EAAA,GAAXhC,WAAW;AA8CjB,eAAeA,WAAW;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}