{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aswin\\\\Desktop\\\\React Task\\\\my-react-task\\\\src\\\\DoctorList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorsList = () => {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const token = localStorage.getItem(\"token\");\n  useEffect(() => {\n    const fetchDoctors = async () => {\n      try {\n        const response = await fetch(\"https://ahd.instapract.ae/web/api/doctor/doc-list\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"APPID\": \"Gem3s12345\",\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await response.json();\n        console.log(\"Doctors List API Response:\", data);\n        if (response.ok && Array.isArray(data.data)) {\n          setDoctors(data.data);\n        } else {\n          console.warn(\"Doctor list is empty or response is invalid.\");\n          setDoctors([]);\n        }\n      } catch (error) {\n        console.error(\"Error fetching doctors:\", error);\n      }\n    };\n    if (token) {\n      fetchDoctors();\n    } else {\n      console.warn(\"No token found in localStorage.\");\n    }\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Doctors List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), doctors.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-500\",\n      children: \"No doctors found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"space-y-2\",\n      children: doctors.map((doc, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"p-3 border rounded shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-semibold\",\n          children: doc.name || doc.doctor_name || doc.full_name || \"No Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this), \" \", \"-\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: doc.speciality || doc.specialty || \"No Speciality\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorsList, \"kcw5qKDPTTui1RDpe6DT6D3WwHo=\");\n_c = DoctorsList;\nexport default DoctorsList;\nvar _c;\n$RefreshReg$(_c, \"DoctorsList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","DoctorsList","_s","doctors","setDoctors","token","localStorage","getItem","fetchDoctors","response","fetch","method","headers","Authorization","data","json","console","log","ok","Array","isArray","warn","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","doc","index","name","doctor_name","full_name","speciality","specialty","_c","$RefreshReg$"],"sources":["C:/Users/aswin/Desktop/React Task/my-react-task/src/DoctorList.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst DoctorsList = () => {\r\n  const [doctors, setDoctors] = useState([]);\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  useEffect(() => {\r\n    const fetchDoctors = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://ahd.instapract.ae/web/api/doctor/doc-list\",\r\n          {\r\n            method: \"GET\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              \"APPID\": \"Gem3s12345\",\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        const data = await response.json();\r\n        console.log(\"Doctors List API Response:\", data);\r\n\r\n        if (response.ok && Array.isArray(data.data)) {\r\n          setDoctors(data.data);\r\n        } else {\r\n          console.warn(\"Doctor list is empty or response is invalid.\");\r\n          setDoctors([]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching doctors:\", error);\r\n      }\r\n    };\r\n\r\n    if (token) {\r\n      fetchDoctors();\r\n    } else {\r\n      console.warn(\"No token found in localStorage.\");\r\n    }\r\n  }, [token]);\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Doctors List</h2>\r\n      {doctors.length === 0 ? (\r\n        <p className=\"text-gray-500\">No doctors found.</p>\r\n      ) : (\r\n        <ul className=\"space-y-2\">\r\n          {doctors.map((doc, index) => (\r\n            <li key={index} className=\"p-3 border rounded shadow\">\r\n              <span className=\"font-semibold\">\r\n                {doc.name || doc.doctor_name || doc.full_name || \"No Name\"}\r\n              </span>{\" \"}\r\n              -{\" \"}\r\n              <span>\r\n                {doc.speciality || doc.specialty || \"No Speciality\"}\r\n              </span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorsList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}