{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aswin\\\\Desktop\\\\React Task\\\\my-react-task\\\\src\\\\DoctorList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorList = () => {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [error, setError] = useState(\"\");\n  const token = localStorage.getItem(\"token\");\n  useEffect(() => {\n    const fetchDoctors = async () => {\n      try {\n        console.log(\"Fetching with token:\", token);\n        const response = await fetch(\"https://ahd.instapract.ae/web/api/doctor/doc-list\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            APPID: \"Gem3s12345\",\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log(\"API Status:\", response.status);\n        const data = await response.json();\n        console.log(\"API Response:\", data);\n        if (response.ok && data.success && Array.isArray(data.data)) {\n          setDoctors(data.data);\n          setError(\"\");\n        } else {\n          setDoctors([]);\n          setError(data.msg || \"Failed to fetch doctor list.\");\n        }\n      } catch (err) {\n        console.error(\"Error fetching doctor list:\", err);\n        setError(\"Failed to fetch doctor list\");\n      }\n    };\n    if (token) {\n      fetchDoctors();\n    } else {\n      setError(\"Login required. No token found.\");\n    }\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Doctors List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this), doctors.length === 0 && !error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-500\",\n      children: \"No doctors found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"space-y-2\",\n      children: doctors.map((doc, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"p-3 border rounded shadow\",\n        children: [doc.name || doc.full_name || doc.doctor_name || \"No Name\", \" -\", \" \", doc.speciality || doc.specialty || \"No Speciality\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorList, \"/NjzmG1IXHO4XUdExXylXdZ7hSk=\");\n_c = DoctorList;\nexport default DoctorList;\nvar _c;\n$RefreshReg$(_c, \"DoctorList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","DoctorList","_s","doctors","setDoctors","error","setError","token","localStorage","getItem","fetchDoctors","console","log","response","fetch","method","headers","APPID","Authorization","status","data","json","ok","success","Array","isArray","msg","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","doc","index","name","full_name","doctor_name","speciality","specialty","_c","$RefreshReg$"],"sources":["C:/Users/aswin/Desktop/React Task/my-react-task/src/DoctorList.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst DoctorList = () => {\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  useEffect(() => {\r\n    const fetchDoctors = async () => {\r\n      try {\r\n        console.log(\"Fetching with token:\", token);\r\n\r\n        const response = await fetch(\"https://ahd.instapract.ae/web/api/doctor/doc-list\", {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            APPID: \"Gem3s12345\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        console.log(\"API Status:\", response.status);\r\n\r\n        const data = await response.json();\r\n        console.log(\"API Response:\", data);\r\n\r\n        if (response.ok && data.success && Array.isArray(data.data)) {\r\n          setDoctors(data.data);\r\n          setError(\"\");\r\n        } else {\r\n          setDoctors([]);\r\n          setError(data.msg || \"Failed to fetch doctor list.\");\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching doctor list:\", err);\r\n        setError(\"Failed to fetch doctor list\");\r\n      }\r\n    };\r\n\r\n    if (token) {\r\n      fetchDoctors();\r\n    } else {\r\n      setError(\"Login required. No token found.\");\r\n    }\r\n  }, [token]);\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Doctors List</h2>\r\n      {error && <p className=\"text-red-500\">{error}</p>}\r\n\r\n      {doctors.length === 0 && !error ? (\r\n        <p className=\"text-gray-500\">No doctors found.</p>\r\n      ) : (\r\n        <ul className=\"space-y-2\">\r\n          {doctors.map((doc, index) => (\r\n            <li key={index} className=\"p-3 border rounded shadow\">\r\n              {doc.name || doc.full_name || doc.doctor_name || \"No Name\"} -{\" \"}\r\n              {doc.speciality || doc.specialty || \"No Speciality\"}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}