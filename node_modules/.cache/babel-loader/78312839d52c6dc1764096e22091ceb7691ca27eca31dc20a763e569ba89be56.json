{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aswin\\\\Desktop\\\\React Task\\\\my-react-task\\\\src\\\\DoctorList.jsx\",\n  _s = $RefreshSig$();\n// src/pages/DoctorList.jsx\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorList = () => {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    const fetchDoctors = async () => {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        setError(\"Not authorized\");\n        return;\n      }\n      try {\n        const res = await fetch(\"https://ahd.instapract.ae/web/api/doctor/doc-list\", {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await res.json();\n        console.log(\"Doctors Response:\", data);\n        if (res.ok) {\n          setDoctors(data.data || []);\n        } else {\n          setError(data.message || \"Failed to fetch doctor list.\");\n        }\n      } catch (err) {\n        setError(\"Error fetching doctors\");\n      }\n    };\n    fetchDoctors();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"Doctor List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 mb-4\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-disc pl-4\",\n      children: doctors.map(doc => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: doc.name\n      }, doc.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorList, \"/NjzmG1IXHO4XUdExXylXdZ7hSk=\");\n_c = DoctorList;\nexport default DoctorList;\nvar _c;\n$RefreshReg$(_c, \"DoctorList\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","DoctorList","_s","doctors","setDoctors","error","setError","fetchDoctors","token","localStorage","getItem","res","fetch","headers","Authorization","data","json","console","log","ok","message","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","doc","name","id","_c","$RefreshReg$"],"sources":["C:/Users/aswin/Desktop/React Task/my-react-task/src/DoctorList.jsx"],"sourcesContent":["// src/pages/DoctorList.jsx\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst DoctorList = () => {\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchDoctors = async () => {\r\n      const token = localStorage.getItem(\"token\");\r\n      if (!token) {\r\n        setError(\"Not authorized\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const res = await fetch(\"https://ahd.instapract.ae/web/api/doctor/doc-list\", {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        const data = await res.json();\r\n        console.log(\"Doctors Response:\", data);\r\n\r\n        if (res.ok) {\r\n          setDoctors(data.data || []);\r\n        } else {\r\n          setError(data.message || \"Failed to fetch doctor list.\");\r\n        }\r\n      } catch (err) {\r\n        setError(\"Error fetching doctors\");\r\n      }\r\n    };\r\n\r\n    fetchDoctors();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h2 className=\"text-xl font-bold mb-4\">Doctor List</h2>\r\n      {error && <p className=\"text-red-500 mb-4\">{error}</p>}\r\n      <ul className=\"list-disc pl-4\">\r\n        {doctors.map((doc) => (\r\n          <li key={doc.id}>{doc.name}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorList;\r\n\r\n\r\n"],"mappings":";;AAAA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,MAAMU,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI,CAACF,KAAK,EAAE;QACVF,QAAQ,CAAC,gBAAgB,CAAC;QAC1B;MACF;MAEA,IAAI;QACF,MAAMK,GAAG,GAAG,MAAMC,KAAK,CAAC,mDAAmD,EAAE;UAC3EC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUN,KAAK;UAChC;QACF,CAAC,CAAC;QAEF,MAAMO,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;QAC7BC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,IAAI,CAAC;QAEtC,IAAIJ,GAAG,CAACQ,EAAE,EAAE;UACVf,UAAU,CAACW,IAAI,CAACA,IAAI,IAAI,EAAE,CAAC;QAC7B,CAAC,MAAM;UACLT,QAAQ,CAACS,IAAI,CAACK,OAAO,IAAI,8BAA8B,CAAC;QAC1D;MACF,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZf,QAAQ,CAAC,wBAAwB,CAAC;MACpC;IACF,CAAC;IAEDC,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA;IAAKsB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBvB,OAAA;MAAIsB,SAAS,EAAC,wBAAwB;MAAAC,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtDtB,KAAK,iBAAIL,OAAA;MAAGsB,SAAS,EAAC,mBAAmB;MAAAC,QAAA,EAAElB;IAAK;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtD3B,OAAA;MAAIsB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAC3BpB,OAAO,CAACyB,GAAG,CAAEC,GAAG,iBACf7B,OAAA;QAAAuB,QAAA,EAAkBM,GAAG,CAACC;MAAI,GAAjBD,GAAG,CAACE,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB,CAChC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACzB,EAAA,CA9CID,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAgDhB,eAAeA,UAAU;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}