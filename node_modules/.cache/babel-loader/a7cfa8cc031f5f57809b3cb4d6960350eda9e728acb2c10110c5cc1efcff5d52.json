{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aswin\\\\Desktop\\\\React Task\\\\my-react-task\\\\src\\\\DoctorList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorList = ({\n  token\n}) => {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchDoctors = async () => {\n      try {\n        const res = await fetch('https://your-api.com/doctorshttps://ahd.instapract.ae/web/api/doctor/doc-list', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!res.ok) {\n          throw new Error('Failed to fetch doctor list');\n        }\n        const data = await res.json();\n        setDoctors(data.doctors); // Adjust key name based on your API response\n      } catch (err) {\n        setError(err.message || 'Something went wrong');\n      }\n    };\n    if (token) {\n      fetchDoctors();\n    }\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl mb-2\",\n      children: \"Doctor List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"space-y-2\",\n      children: doctors.map((doc, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"border p-2 rounded shadow\",\n        children: [doc.name, \" - \", doc.specialization]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorList, \"gCu7bxsrIkTVloz5muHWd1XPNck=\");\n_c = DoctorList;\nexport default DoctorList;\nvar _c;\n$RefreshReg$(_c, \"DoctorList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","DoctorList","token","_s","doctors","setDoctors","error","setError","fetchDoctors","res","fetch","headers","Authorization","ok","Error","data","json","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","doc","index","name","specialization","_c","$RefreshReg$"],"sources":["C:/Users/aswin/Desktop/React Task/my-react-task/src/DoctorList.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst DoctorList = ({ token }) => {\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchDoctors = async () => {\r\n      try {\r\n        const res = await fetch('https://your-api.com/doctorshttps://ahd.instapract.ae/web/api/doctor/doc-list', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        if (!res.ok) {\r\n          throw new Error('Failed to fetch doctor list');\r\n        }\r\n\r\n        const data = await res.json();\r\n        setDoctors(data.doctors); // Adjust key name based on your API response\r\n      } catch (err) {\r\n        setError(err.message || 'Something went wrong');\r\n      }\r\n    };\r\n\r\n    if (token) {\r\n      fetchDoctors();\r\n    }\r\n  }, [token]);\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h2 className=\"text-xl mb-2\">Doctor List</h2>\r\n      {error && <p className=\"text-red-500\">{error}</p>}\r\n      <ul className=\"space-y-2\">\r\n        {doctors.map((doc, index) => (\r\n          <li key={index} className=\"border p-2 rounded shadow\">\r\n            {doc.name} - {doc.specialization}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,+EAA+E,EAAE;UACvGC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUV,KAAK;UAChC;QACF,CAAC,CAAC;QAEF,IAAI,CAACO,GAAG,CAACI,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QAEA,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,CAAC;QAC7BX,UAAU,CAACU,IAAI,CAACX,OAAO,CAAC,CAAC,CAAC;MAC5B,CAAC,CAAC,OAAOa,GAAG,EAAE;QACZV,QAAQ,CAACU,GAAG,CAACC,OAAO,IAAI,sBAAsB,CAAC;MACjD;IACF,CAAC;IAED,IAAIhB,KAAK,EAAE;MACTM,YAAY,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAACN,KAAK,CAAC,CAAC;EAEX,oBACEF,OAAA;IAAKmB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBpB,OAAA;MAAImB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC5ClB,KAAK,iBAAIN,OAAA;MAAGmB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAEd;IAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjDxB,OAAA;MAAImB,SAAS,EAAC,WAAW;MAAAC,QAAA,EACtBhB,OAAO,CAACqB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACtB3B,OAAA;QAAgBmB,SAAS,EAAC,2BAA2B;QAAAC,QAAA,GAClDM,GAAG,CAACE,IAAI,EAAC,KAAG,EAACF,GAAG,CAACG,cAAc;MAAA,GADzBF,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACrB,EAAA,CA1CIF,UAAU;AAAA6B,EAAA,GAAV7B,UAAU;AA4ChB,eAAeA,UAAU;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}