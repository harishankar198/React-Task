{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aswin\\\\Desktop\\\\React Task\\\\my-react-task\\\\src\\\\DoctorList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorList = () => {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [error, setError] = useState(\"\");\n  const token = localStorage.getItem(\"token\");\n  useEffect(() => {\n    const fetchDoctors = async () => {\n      try {\n        console.log(\"Fetching with token:\", token);\n        const response = await fetch(\"https://qa-uaesaas-api.instapract.ae/web/api/doctor/doc-list\", {\n          method: \"POST\",\n          // ✅ Use POST as required\n          headers: {\n            \"Content-Type\": \"application/json\",\n            APPID: \"Gem3s12345\",\n            Authorization: `Bearer ${token}`\n          },\n          body: JSON.stringify({}) // ✅ Send an empty object if no params\n        });\n        const data = await response.json();\n        console.log(\"Doctors List API Response:\", data);\n        if (response.ok && Array.isArray(data.data)) {\n          setDoctors(data.data);\n        } else {\n          setDoctors([]);\n          setError(data.message || \"No doctors found.\");\n        }\n      } catch (err) {\n        console.error(\"Error fetching doctor list:\", err);\n        setError(\"Failed to fetch doctor list.\");\n      }\n    };\n    if (token) {\n      fetchDoctors();\n    } else {\n      console.warn(\"No token found in localStorage.\");\n      setError(\"You must log in first.\");\n    }\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Doctors List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 mb-4\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this), doctors.length === 0 && !error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-500\",\n      children: \"No doctors found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"space-y-2\",\n      children: doctors.map((doc, index) => {\n        var _doc$speciality, _doc$specialty;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"p-4 border rounded shadow\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-semibold\",\n            children: doc.name || doc.doctor_name || doc.full_name || \"No Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-600\",\n            children: ((_doc$speciality = doc.speciality) === null || _doc$speciality === void 0 ? void 0 : _doc$speciality.name) || ((_doc$specialty = doc.specialty) === null || _doc$specialty === void 0 ? void 0 : _doc$specialty.name) || \"No Speciality\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorList, \"/NjzmG1IXHO4XUdExXylXdZ7hSk=\");\n_c = DoctorList;\nexport default DoctorList;\nvar _c;\n$RefreshReg$(_c, \"DoctorList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","DoctorList","_s","doctors","setDoctors","error","setError","token","localStorage","getItem","fetchDoctors","console","log","response","fetch","method","headers","APPID","Authorization","body","JSON","stringify","data","json","ok","Array","isArray","message","err","warn","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","doc","index","_doc$speciality","_doc$specialty","name","doctor_name","full_name","speciality","specialty","_c","$RefreshReg$"],"sources":["C:/Users/aswin/Desktop/React Task/my-react-task/src/DoctorList.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst DoctorList = () => {\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  useEffect(() => {\r\n    const fetchDoctors = async () => {\r\n      try {\r\n        console.log(\"Fetching with token:\", token);\r\n\r\n        const response = await fetch(\r\n          \"https://qa-uaesaas-api.instapract.ae/web/api/doctor/doc-list\",\r\n          {\r\n            method: \"POST\", // ✅ Use POST as required\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              APPID: \"Gem3s12345\",\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({}), // ✅ Send an empty object if no params\r\n          }\r\n        );\r\n\r\n        const data = await response.json();\r\n        console.log(\"Doctors List API Response:\", data);\r\n\r\n        if (response.ok && Array.isArray(data.data)) {\r\n          setDoctors(data.data);\r\n        } else {\r\n          setDoctors([]);\r\n          setError(data.message || \"No doctors found.\");\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching doctor list:\", err);\r\n        setError(\"Failed to fetch doctor list.\");\r\n      }\r\n    };\r\n\r\n    if (token) {\r\n      fetchDoctors();\r\n    } else {\r\n      console.warn(\"No token found in localStorage.\");\r\n      setError(\"You must log in first.\");\r\n    }\r\n  }, [token]);\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Doctors List</h2>\r\n      {error && <p className=\"text-red-500 mb-4\">{error}</p>}\r\n      {doctors.length === 0 && !error ? (\r\n        <p className=\"text-gray-500\">No doctors found.</p>\r\n      ) : (\r\n        <ul className=\"space-y-2\">\r\n          {doctors.map((doc, index) => (\r\n            <li key={index} className=\"p-4 border rounded shadow\">\r\n              <p className=\"font-semibold\">\r\n                {doc.name || doc.doctor_name || doc.full_name || \"No Name\"}\r\n              </p>\r\n              <p className=\"text-sm text-gray-600\">\r\n                {doc.speciality?.name || doc.specialty?.name || \"No Speciality\"}\r\n              </p>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorList;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}